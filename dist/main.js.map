{"version":3,"file":"main.js","mappings":"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","sources":["webpack://timerfighter/./src/index.js"],"sourcesContent":["\ndocument.addEventListener('DOMContentLoaded', () => {\n\n// const canvas = document.querySelector('canvas')\nconst canvas = document.getElementById('timer-fighter');\nconsole.log(canvas)\nconst c = canvas.getContext('2d')\n\n// new Sprite(canvas);\n\n//setting canvas on weidth and height to 1024/576\ncanvas.width = 1024\ncanvas.height = 576\n\n\n//using canvas api (.fillRect draws a rectangle) to fill up canvas at starting from  0,0\nc.fillRect(0, 0, canvas.width, canvas.height)\n\n\n// added a const gravity for the game \nconst gravity  = 1.3\n\n\n\n// this is the class for sprite images, takes in position and assigns image and \n//sorce of the image. dats the image using a built in canvas method(drawImage)\n//also invokes the draw() function \n// frames elapsed is for how many frames the game is going through\n//frames hold is how many frames elapsed until you loop the current frame\n\nclass Sprite {\n    constructor({position, imageSrc, scale = 1, framesMax = 1, offset = {x: 0, y: 0} }) {\n        this.position = position\n        this.width = 50\n        this.height = 125\n        this.image = new Image()\n        this.image.src = imageSrc \n        this.scale = scale\n        this.framesMax = framesMax\n        this.framesCurrent = 0\n        this.framesElapsed = 0\n        this.framesHold = 150\n\n        //offset to recenter sprite\n        this.offset = offset\n    }\n    // takes in image, and splits the image into the max number of frames then multiply\n    //it by the number of frames. then scales the image\n\n    draw() {\n        c.drawImage(\n            this.image,\n            this.framesCurrent * (this.image.width / this.framesMax),\n            0,\n            this.image.width / this.framesMax,\n            this.image.height,\n            this.position.x - this.offset.x,\n            this.position.y - this.offset.y,\n            (this.image.width / this.framesMax) * this.scale,\n            this.image.height * this.scale\n            )\n        \n    }\n    //to the current frame. \n    // if the frames is less than the max frame then add one. \n    //if it is at max frames then loop back to the start.\n    animateFrames() {\n        this.framesElapsed++\n        if (this.framesElapsed % this.framesHold === 0) {\n            if (this.framesCurrent < this.framesMax - 1) {\n                this.framesCurrent++\n            } else {\n                this.framesCurrent = 0\n            }\n        }\n    }\n\n    //draws the script and adds a frame \n    update() {\n        this.draw()\n        this.animateFrames()\n    }\n}\n\n\n\n\n// using for object oriented programing to create a sprite class that will take a position, when called on. \n//velocity and position are wrapped together because you cant through velocity first and cant put position second.\n// within the draw method we are taking arguments built in the new sprite and filling it with given arguements.\n//lastkey movement for each player\n//added an attackbox for the character\n//added an is attacking value for each player\n//extends takes functions from sprite\n//in super you select inheritance from parent properties\nclass Fighter extends Sprite{\n    constructor({ position, velocity, color = \"white\", imageSrc, scale = 1, framesMax = 1, offset = { x: 0, y: 0 } }) {\n        super({position, imageSrc, scale, framesMax, offset})\n        this.velocity = velocity\n        this.color = color\n        this.width = 50\n        this.height = 65\n        this.lastKey\n        this.attackBox = {\n            position: {\n                x: this.position.x,\n                y: this.position.y\n            },\n            offset,\n            width: 65,\n            height: 25\n        }\n        this.isAttacking\n        this.health = 100\n        //same as in spriteclass but we dont want to overkill and put in into constructor argument\n        this.framesCurrent = 0\n        this.framesElapsed = 0\n        this.framesHold = 10\n        \n\n\n\n    }\n    \n    \n    \n    //the update method adds the drop speed(gravity) to y for each time the frame is loaded through draw\n    update() {\n        this.draw()\n        this.animateFrames()\n        //sets the position of the x box to the characters position \n        this.attackBox.position.x = this.position.x + this.attackBox.offset.x\n        this.attackBox.position.y = this.position.y\n\n        this.position.y += this.velocity.y\n        this.position.x += this.velocity.x\n        //if the top of the character is at the bottom of the board then set drop to 0\n        //else keep dropping\n        // -18 from the bottom of the canvas so its not leveled on the border of canvas\n        if (this.position.y + this.height + this.velocity.y >= canvas.height -18) {\n            this.velocity.y = 0\n        } else this.velocity.y += gravity\n    }\n    // when invoked attacking is character/bots isAttacking value set to true for 100ms then changed back to false\n    attack() {\n        this.isAttacking = true \n        setTimeout (() => {\n            this.isAttacking = false\n        }, 100)\n    }\n}\n\n\nconst background = new Sprite({\n    position: {\n        x: 0,\n        y: 0\n    },\n    imageSrc: 'src/assets/village_2 copy.png'\n})\n\nconst house = new Sprite({\n    position: {\n        x: 351,\n        y: 111\n    },\n    imageSrc: 'src/assets/spritesheet.png',\n    scale: 1.032,\n    framesMax: 3\n})\n\n\n\n//when a player is being invoked it createss a new sprite of a player with x, y set.\n//player has x,y velocity of 0,\n//offset is for the attackbox and which way it faces\nconst player = new Fighter({\n    position: {\n        x: 50,\n        y: 400\n    },\n    velocity: {\n        x: 0,\n        y: 0\n    },\n    offset: {\n        x: 0,\n        y: 0\n    },\n    imageSrc: 'src/assets/Krillin/idle.png',\n    scale: 0.75,\n    framesMax: 4,\n    offset: {\n        x: 0,\n        y: 0\n    }\n}\n)\n\nconst enemy = new Fighter({\n    position: {\n        x: 924,\n        y: 400\n    },\n    velocity: {\n        x: 0,\n        y: 0\n    },\n    color: \"white\",\n    offset: {\n        x: -50,\n        y: 0\n    },\n    imageSrc: 'src/assets/Krillin/1.png',\n    scale: 1.1,\n    framesMax: 1\n})\n\n//these are the keys for the players / bots\n//stops movement if false\nconst keys = {\n    a: {\n        pressed: false\n    },\n    d: {\n        pressed: false\n    },\n    w: {\n        pressed: false\n    },\n    ArrowRight: {\n        pressed: false\n    },\n    ArrowLeft: {\n        pressed: false\n    },\n    ArrowUp: {\n        pressed: false\n    }\n    \n}\n\n\n\n// collision for attackboxes and enemy\n//if the players x to width position is past enemys position and vise versa &&\n// players y to height is with in enemys height and vise versa \nfunction rectangleCollision({rectangle1, rectangle2}) {\n    return (\n        rectangle1.attackBox.position.x + rectangle1.attackBox.width >= rectangle2.position.x &&\n        rectangle1.attackBox.position.x <= rectangle2.position.x + rectangle2.width &&\n        rectangle1.attackBox.position.y + rectangle1.attackBox.height >= rectangle2.position.y &&\n        rectangle1.attackBox.position.y <= rectangle2.position.y + rectangle2.height \n    )\n}\n\n// has there if statements for what end game displays. \n// resets the html id of displayTie display from hidden to flex and changes the innerHTML content\n// stops the timeout timer\nfunction determineWinner({player, enemy, timerId}) {\n    clearTimeout(timerId)\n    document.querySelector('#displayTie').style.display = 'flex'\n    if (player.health === enemy.health) {\n        document.querySelector('#displayTie').innerHTML = 'Tie'\n    } else if (player.health > enemy.health) {\n        document.querySelector('#displayTie').innerHTML = 'Player 1 Wins!'\n    } else if (player.health < enemy.health) {\n        document.querySelector('#displayTie').innerHTML = 'Player 2 Wins!'\n    }\n}\n\n// this is the clock function that sets and counts down the clock\nlet timer = 15\nlet timerId\nfunction decreaseTimer() {\n    if (timer > 0) {\n        timerId = setTimeout(decreaseTimer, 1000)\n        timer--\n        document.querySelector('#timer').innerHTML = timer\n    }\n    if (timer === 0) {\n        determineWinner({player, enemy, timerId})\n    }\n}\n\ndecreaseTimer()\n\n\n//creating a constant loop where we request the window to have a animation \n//by taking in the argument of itself\n//updates the canvas with a fillrect after each loop and setting it to black \n//update draws and moves the object\nfunction animate() {\n    window.requestAnimationFrame(animate)\n    c.fillStyle = \"black\"\n    c.fillRect(0, 0, canvas.width, canvas.height)\n    background.update()\n    house.update()\n    player.update()\n    enemy.update()\n\n    player.velocity.x = 0\n    enemy.velocity.x = 0\n\n\n    //player movement \n    //if last key is pressed then player will move in that direction by altering velocity\n    if (keys.a.pressed && player.lastKey === 'a') {\n        player.velocity.x = -7\n    } else if (keys.d.pressed && player.lastKey === 'd') {\n        player.velocity.x = 7 \n    } \n\n    //enemy movement same as players\n    if (keys.ArrowLeft.pressed && enemy.lastKey === 'ArrowLeft') {\n        enemy.velocity.x = -7\n    } else if (keys.ArrowRight.pressed && enemy.lastKey === 'ArrowRight') {\n        enemy.velocity.x = 7\n    } \n\n    //collision detect\n    // if rectanglecollision is true and is attacking is true\n    if (rectangleCollision({\n        rectangle1: player,\n        rectangle2: enemy\n        }) && player.isAttacking) {\n        player.isAttacking = false    \n        enemy.health -= 10\n        document.querySelector('#enemy-health').style.width = enemy.health + '%'\n        console.log('player attack successful');\n    }\n\n    if (rectangleCollision({ \n        rectangle1: enemy,\n        rectangle2: player \n        }) && enemy.isAttacking) {\n        enemy.isAttacking = false\n        player.health -= 10\n        document.querySelector('#player-health').style.width = player.health + '%'\n        console.log('enemy attack successful');\n    }\n\n    //end game by health\n    if (player.health <= 0 || enemy.health <= 0) {\n        determineWinner({player, enemy, timerId})\n    }\n}\n\nanimate()\n\nwindow.addEventListener('keydown', (event) => {\n    switch (event.key) {\n        case 'd':\n            keys.d.pressed = true\n            player.lastKey = 'd'\n            break\n        case 'a':\n            keys.a.pressed = true\n            player.lastKey = 'a'\n            break\n        case 'w':\n            player.velocity.y = -25\n            break\n        case ',':\n            player.attack()\n            break\n\n \n\n\n        case 'ArrowRight':\n            keys.ArrowRight.pressed = true\n            enemy.lastKey = 'ArrowRight'\n            break\n        case 'ArrowLeft':\n            keys.ArrowLeft.pressed = true\n            enemy.lastKey = 'ArrowLeft'\n            break\n        case 'ArrowUp':\n            enemy.velocity.y = -25\n            break\n        case 'ArrowDown':\n            enemy.attack()\n            break\n    }\n// console.log(event.key)\n})\n\nwindow.addEventListener('keyup', (event) => {\n    switch (event.key) {\n        case 'd':\n            keys.d.pressed = false\n            break\n        case 'a':\n            keys.a.pressed = false\n            break\n        case 'w':\n            keys.w.pressed = false\n            break\n    }\n\n    //enemys\n    switch (event.key) {\n        case 'ArrowRight':\n            keys.ArrowRight.pressed = false\n            break\n        case 'ArrowLeft':\n            keys.ArrowLeft.pressed = false\n            break\n        case 'ArrowUp':\n            keys.ArrowUp.pressed = false\n            break\n    }\n//    console.log(event.key)\n})\n\n\n})\n"],"names":["document","addEventListener","canvas","getElementById","console","log","c","getContext","width","height","fillRect","Sprite","constructor","position","imageSrc","scale","framesMax","offset","x","y","this","image","Image","src","framesCurrent","framesElapsed","framesHold","draw","drawImage","animateFrames","update","Fighter","velocity","color","super","lastKey","attackBox","isAttacking","health","attack","setTimeout","background","house","player","enemy","keys","a","pressed","d","w","ArrowRight","ArrowLeft","ArrowUp","rectangleCollision","rectangle1","rectangle2","determineWinner","timerId","clearTimeout","querySelector","style","display","innerHTML","timer","decreaseTimer","animate","window","requestAnimationFrame","fillStyle","event","key"],"sourceRoot":""}