/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function() {

eval("document.addEventListener('DOMContentLoaded', () => {\n  // const canvas = document.querySelector('canvas')\n  const canvas = document.getElementById('timer-fighter');\n  console.log(canvas);\n  const c = canvas.getContext('2d'); // new Sprite(canvas);\n  //setting canvas on weidth and height to 1024/576\n\n  canvas.width = 1024;\n  canvas.height = 576; //using canvas api (.fillRect draws a rectangle) to fill up canvas at starting from  0,0\n\n  c.fillRect(0, 0, canvas.width, canvas.height); // added a const gravity for the game \n\n  const gravity = 0.7; // using for object oriented programing to create a sprite class that will take a position, when called on. \n  //velocity and position are wrapped together because you cant through velocity first and cant put position second.\n  // within the draw method we are taking arguments built in the new sprite and filling it with given arguements.\n  //lastkey movement for each player\n  //added an attackbox for the character\n  //added an is attacking value for each player\n\n  class Sprite {\n    constructor(_ref) {\n      let {\n        position,\n        velocity,\n        color = \"orange\",\n        offset\n      } = _ref;\n      this.position = position;\n      this.velocity = velocity;\n      this.color = color;\n      this.width = 50;\n      this.height = 125;\n      this.lastKey;\n      this.attackBox = {\n        position: {\n          x: this.position.x,\n          y: this.position.y\n        },\n        offset,\n        width: 100,\n        height: 50\n      };\n      this.isAttacking;\n      this.health = 100;\n    }\n\n    draw() {\n      //characters animation\n      c.fillStyle = this.color;\n      c.fillRect(this.position.x, this.position.y, 50, this.height); //attackbox animation\n      //if statement allows draw to only show when isAttacking is true \n\n      if (this.isAttacking) {\n        c.fillStyle = \"red\";\n        c.fillRect(this.attackBox.position.x, this.attackBox.position.y, this.attackBox.width, this.attackBox.height);\n      }\n    } //the update method adds the drop speed(gravity) to y for each time the frame is loaded through draw\n\n\n    update() {\n      this.draw(); //sets the position of the x box to the characters position \n\n      this.attackBox.position.x = this.position.x + this.attackBox.offset.x;\n      this.attackBox.position.y = this.position.y;\n      this.position.y += this.velocity.y;\n      this.position.x += this.velocity.x; //if the top of the character is at the bottom of the board then set drop to 0\n      //else keep dropping\n\n      if (this.position.y + this.height + this.velocity.y >= canvas.height) {\n        this.velocity.y = 0;\n      } else this.velocity.y += gravity;\n    } // when invoked attacking is character/bots isAttacking value set to true for 100ms then changed back to false\n\n\n    attack() {\n      this.isAttacking = true;\n      setTimeout(() => {\n        this.isAttacking = false;\n      }, 100);\n    }\n\n  } //when a player is being invoked it createss a new sprite of a player with x, y set.\n  //player has x,y velocity of 0,\n\n\n  const player = new Sprite({\n    position: {\n      x: 0,\n      y: 0\n    },\n    velocity: {\n      x: 0,\n      y: 0\n    },\n    offset: {\n      x: 0,\n      y: 0\n    }\n  });\n  const enemy = new Sprite({\n    position: {\n      x: 400,\n      y: 100\n    },\n    velocity: {\n      x: 0,\n      y: 0\n    },\n    color: \"blue\",\n    offset: {\n      x: -50,\n      y: 0\n    }\n  }); //these are the keys for the players / bots\n  //stops movement if false\n\n  const keys = {\n    a: {\n      pressed: false\n    },\n    d: {\n      pressed: false\n    },\n    w: {\n      pressed: false\n    },\n    ArrowRight: {\n      pressed: false\n    },\n    ArrowLeft: {\n      pressed: false\n    },\n    ArrowUp: {\n      pressed: false\n    }\n  }; // collision for attackboxes and enemy\n  //if the players x to width position is past enemys position and vise versa &&\n  // players y to height is with in enemys height and vise versa \n\n  function rectangleCollision(_ref2) {\n    let {\n      rectangle1,\n      rectangle2\n    } = _ref2;\n    return rectangle1.attackBox.position.x + rectangle1.attackBox.width >= rectangle2.position.x && rectangle1.attackBox.position.x <= rectangle2.position.x + rectangle2.width && rectangle1.attackBox.position.y + rectangle1.attackBox.height >= rectangle2.position.y && rectangle1.attackBox.position.y <= rectangle2.position.y + rectangle2.height;\n  } //creating a constant loop where we request the window to have a animation \n  //by taking in the argument of itself\n  //updates the canvas with a fillrect after each loop and setting it to black \n  //update draws and moves the object\n\n\n  function animate() {\n    window.requestAnimationFrame(animate);\n    c.fillStyle = \"black\";\n    c.fillRect(0, 0, canvas.width, canvas.height);\n    player.update();\n    enemy.update();\n    player.velocity.x = 0;\n    enemy.velocity.x = 0; //player movement \n    //if last key is pressed then player will move in that direction by altering velocity\n\n    if (keys.a.pressed && player.lastKey === 'a') {\n      player.velocity.x = -7;\n    } else if (keys.d.pressed && player.lastKey === 'd') {\n      player.velocity.x = 7;\n    } //enemy movement same as players\n\n\n    if (keys.ArrowLeft.pressed && enemy.lastKey === 'ArrowLeft') {\n      enemy.velocity.x = -7;\n    } else if (keys.ArrowRight.pressed && enemy.lastKey === 'ArrowRight') {\n      enemy.velocity.x = 7;\n    } //collision detect\n    // if rectanglecollision is true and is attacking is true\n\n\n    if (rectangleCollision({\n      rectangle1: player,\n      rectangle2: enemy\n    }) && player.isAttacking) {\n      player.isAttacking = false;\n      enemy.health -= 2;\n      document.querySelector('#enemy-health').style.width = enemy.health + '%';\n      console.log('player attack successful');\n    }\n\n    if (rectangleCollision({\n      rectangle1: enemy,\n      rectangle2: player\n    }) && enemy.isAttacking) {\n      enemy.isAttacking = false;\n      console.log('enemy attack successful');\n    }\n  }\n\n  animate();\n  window.addEventListener('keydown', event => {\n    switch (event.key) {\n      case 'd':\n        keys.d.pressed = true;\n        player.lastKey = 'd';\n        break;\n\n      case 'a':\n        keys.a.pressed = true;\n        player.lastKey = 'a';\n        break;\n\n      case 'w':\n        player.velocity.y = -25;\n        break;\n\n      case ',':\n        player.attack();\n        break;\n\n      case 'ArrowRight':\n        keys.ArrowRight.pressed = true;\n        enemy.lastKey = 'ArrowRight';\n        break;\n\n      case 'ArrowLeft':\n        keys.ArrowLeft.pressed = true;\n        enemy.lastKey = 'ArrowLeft';\n        break;\n\n      case 'ArrowUp':\n        enemy.velocity.y = -25;\n        break;\n\n      case 'ArrowDown':\n        enemy.attack();\n        break;\n    } // console.log(event.key)\n\n  });\n  window.addEventListener('keyup', event => {\n    switch (event.key) {\n      case 'd':\n        keys.d.pressed = false;\n        break;\n\n      case 'a':\n        keys.a.pressed = false;\n        break;\n\n      case 'w':\n        keys.w.pressed = false;\n        break;\n    } //enemys\n\n\n    switch (event.key) {\n      case 'ArrowRight':\n        keys.ArrowRight.pressed = false;\n        break;\n\n      case 'ArrowLeft':\n        keys.ArrowLeft.pressed = false;\n        break;\n\n      case 'ArrowUp':\n        keys.ArrowUp.pressed = false;\n        break;\n    } //    console.log(event.key)\n\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aW1lcmZpZ2h0ZXIvLi9zcmMvaW5kZXguc2Nzcz85NzQ1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./src/index.js"](0, {}, __webpack_require__);
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.scss"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;