/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function() {

eval("document.addEventListener('DOMContentLoaded', () => {\n  // const canvas = document.querySelector('canvas')\n  const canvas = document.getElementById('timer-fighter');\n  console.log(canvas);\n  const c = canvas.getContext('2d'); // new Sprite(canvas);\n  //setting canvas on weidth and height to 1024/576\n\n  canvas.width = 1024;\n  canvas.height = 576; //using canvas api (.fillRect draws a rectangle) to fill up canvas at starting from  0,0\n\n  c.fillRect(0, 0, canvas.width, canvas.height); // added a const gravity for the game \n\n  const gravity = 1.3; // this is the class for sprite images, takes in position and assigns image and \n  //sorce of the image. dats the image using a built in canvas method(drawImage)\n  //also invokes the draw() function \n  // frames elapsed is for how many frames the game is going through\n  //frames hold is how many frames elapsed until you loop the current frame\n\n  class Sprite {\n    constructor(_ref) {\n      let {\n        position,\n        imageSrc,\n        scale = 1,\n        framesMax = 1,\n        offset = {\n          x: 0,\n          y: 0\n        }\n      } = _ref;\n      this.position = position;\n      this.width = 50;\n      this.height = 125;\n      this.image = new Image();\n      this.image.src = imageSrc;\n      this.scale = scale;\n      this.framesMax = framesMax;\n      this.framesCurrent = 0;\n      this.framesElapsed = 0;\n      this.framesHold = 150; //offset to recenter sprite\n\n      this.offset = offset;\n    } // takes in image, and splits the image into the max number of frames then multiply\n    //it by the number of frames. then scales the image\n    //we subtract x, y offset passed in when creating new player because we want to improve position of sprites with large whitespace\n\n\n    draw() {\n      c.drawImage(this.image, this.framesCurrent * (this.image.width / this.framesMax), 0, this.image.width / this.framesMax, this.image.height, this.position.x - this.offset.x, this.position.y - this.offset.y, this.image.width / this.framesMax * this.scale, this.image.height * this.scale);\n    } //to the current frame. \n    // if the frames is less than the max frame then add one. \n    //if it is at max frames then loop back to the start.\n\n\n    animateFrames() {\n      this.framesElapsed++;\n\n      if (this.framesElapsed % this.framesHold === 0) {\n        if (this.framesCurrent < this.framesMax - 1) {\n          this.framesCurrent++;\n        } else {\n          this.framesCurrent = 0;\n        }\n      }\n    } //draws the script and adds a frame \n\n\n    update() {\n      this.draw();\n      this.animateFrames();\n    }\n\n  } // using for object oriented programing to create a sprite class that will take a position, when called on. \n  //velocity and position are wrapped together because you cant through velocity first and cant put position second.\n  // within the draw method we are taking arguments built in the new sprite and filling it with given arguements.\n  //lastkey movement for each player\n  //added an attackbox for the character\n  //added an is attacking value for each player\n  //extends takes functions from sprite\n  //in super you select inheritance from parent(Sprite) properties\n\n\n  class Fighter extends Sprite {\n    constructor(_ref2) {\n      let {\n        position,\n        velocity,\n        color = \"white\",\n        imageSrc,\n        scale = 1,\n        framesMax = 1,\n        offset = {\n          x: 0,\n          y: 0\n        },\n        sprites\n      } = _ref2;\n      super({\n        position,\n        imageSrc,\n        scale,\n        framesMax,\n        offset\n      });\n      this.velocity = velocity;\n      this.color = color;\n      this.width = 50;\n      this.height = 65;\n      this.lastKey;\n      this.attackBox = {\n        position: {\n          x: this.position.x,\n          y: this.position.y\n        },\n        offset,\n        width: 65,\n        height: 25\n      };\n      this.isAttacking;\n      this.health = 100; //same as in spriteclass but we dont want to overkill and put in into constructor argument\n\n      this.framesCurrent = 0;\n      this.framesElapsed = 0;\n      this.framesHold = 5;\n      this.sprites = sprites; //this sets the sprite to the new object\n\n      for (const sprite in this.sprites) {\n        sprites[sprite].image = new Image();\n        sprites[sprite].image.src = sprites[sprite].imageSrc;\n      }\n\n      console.log(this.sprites);\n    } //the update method adds the drop speed(gravity) to y for each time the frame is loaded through draw\n\n\n    update() {\n      this.draw();\n      this.animateFrames(); //sets the position of the x box to the characters position \n\n      this.attackBox.position.x = this.position.x + this.attackBox.offset.x;\n      this.attackBox.position.y = this.position.y;\n      this.position.y += this.velocity.y;\n      this.position.x += this.velocity.x; //if the top of the character is at the bottom of the board then set drop to 0\n      //else keep dropping\n      // -18 from the bottom of the canvas so its not leveled on the border of canvas\n\n      if (this.position.y + this.height + this.velocity.y >= canvas.height - 18) {\n        this.velocity.y = 0;\n      } else this.velocity.y += gravity;\n    } // when invoked attacking is character/bots isAttacking value set to true for 100ms then changed back to false\n\n\n    attack() {\n      this.isAttacking = true;\n      setTimeout(() => {\n        this.isAttacking = false;\n      }, 100);\n    }\n\n    switchSprite(sprite) {\n      switch (sprite) {\n        case 'idle':\n          if (this.image !== this.sprites.idle.image) {\n            this.image === this.sprites.idle.image;\n            this.framesMax = this.sprites.idle.framesMax;\n            this.framesCurrent = 0;\n          }\n\n          break;\n\n        case 'runRight':\n          if (this.image !== this.sprites.runRight.image) {\n            this.image = this.sprites.runRight.image;\n            this.framesMax = this.sprites.runRight.framesMax;\n            this.framesCurrent = 0;\n          }\n\n          break;\n\n        case 'runLeft':\n          if (this.image !== this.sprites.runLeft.image) {\n            this.image = this.sprites.runLeft.image;\n            this.framesMax = this.sprites.runLeft.framesMax;\n            this.framesCurrent = 0;\n          }\n\n          break;\n\n        case 'jump':\n          if (this.image !== this.sprites.jump.image) {\n            this.image = this.sprites.jump.image;\n            this.framesMax = this.sprites.jump.framesMax;\n            this.framesCurrent = 0;\n          }\n\n          break;\n      }\n    }\n\n  }\n\n  const background = new Sprite({\n    position: {\n      x: 0,\n      y: 0\n    },\n    imageSrc: 'src/assets/village_2 copy.png'\n  });\n  const house = new Sprite({\n    position: {\n      x: 351,\n      y: 111\n    },\n    imageSrc: 'src/assets/spritesheet.png',\n    scale: 1.032,\n    framesMax: 3\n  }); //when a player is being invoked it createss a new sprite of a player with x, y set.\n  //player has x,y velocity of 0,\n  //offset is for the attackbox and which way it faces\n\n  const player = new Fighter({\n    position: {\n      x: 50,\n      y: 400\n    },\n    velocity: {\n      x: 0,\n      y: 0\n    },\n    offset: {\n      x: 0,\n      y: 0\n    },\n    imageSrc: 'src/assets/Krillin/idle.png',\n    scale: 0.75,\n    framesMax: 4,\n    offset: {\n      x: 0,\n      y: 0\n    },\n    sprites: {\n      idle: {\n        imageSrc: 'src/assets/Krillin/idle.png',\n        // scale: 0.75,\n        framesMax: 4\n      },\n      runRight: {\n        imageSrc: 'src/assets/Krillin/runRight.png',\n        // scale: 0.75,\n        framesMax: 4,\n        image: new Image()\n      },\n      runLeft: {\n        imageSrc: 'src/assets/Krillin/runLeft.png',\n        // scale: 0.75,\n        framesMax: 4,\n        image: new Image()\n      },\n      jump: {\n        imageSrc: 'src/assets/Krillin/jump.png',\n        // scale: 0.75,\n        framesMax: 4,\n        image: new Image()\n      }\n    }\n  });\n  const enemy = new Fighter({\n    position: {\n      x: 924,\n      y: 400\n    },\n    velocity: {\n      x: 0,\n      y: 0\n    },\n    color: \"white\",\n    offset: {\n      x: -50,\n      y: 0\n    },\n    imageSrc: 'src/assets/Krillin/idle.png',\n    scale: 1.1,\n    framesMax: 1\n  }); //these are the keys for the players / bots\n  //stops movement if false\n\n  const keys = {\n    a: {\n      pressed: false\n    },\n    d: {\n      pressed: false\n    },\n    w: {\n      pressed: false\n    },\n    ArrowRight: {\n      pressed: false\n    },\n    ArrowLeft: {\n      pressed: false\n    },\n    ArrowUp: {\n      pressed: false\n    }\n  }; // collision for attackboxes and enemy\n  //if the players x to width position is past enemys position and vise versa &&\n  // players y to height is with in enemys height and vise versa \n\n  function rectangleCollision(_ref3) {\n    let {\n      rectangle1,\n      rectangle2\n    } = _ref3;\n    return rectangle1.attackBox.position.x + rectangle1.attackBox.width >= rectangle2.position.x && rectangle1.attackBox.position.x <= rectangle2.position.x + rectangle2.width && rectangle1.attackBox.position.y + rectangle1.attackBox.height >= rectangle2.position.y && rectangle1.attackBox.position.y <= rectangle2.position.y + rectangle2.height;\n  } // has there if statements for what end game displays. \n  // resets the html id of displayTie display from hidden to flex and changes the innerHTML content\n  // stops the timeout timer\n\n\n  function determineWinner(_ref4) {\n    let {\n      player,\n      enemy,\n      timerId\n    } = _ref4;\n    clearTimeout(timerId);\n    document.querySelector('#displayTie').style.display = 'flex';\n\n    if (player.health === enemy.health) {\n      document.querySelector('#displayTie').innerHTML = 'Tie';\n    } else if (player.health > enemy.health) {\n      document.querySelector('#displayTie').innerHTML = 'Player 1 Wins!';\n    } else if (player.health < enemy.health) {\n      document.querySelector('#displayTie').innerHTML = 'Player 2 Wins!';\n    }\n  } // this is the clock function that sets and counts down the clock\n\n\n  let timer = 15;\n  let timerId;\n\n  function decreaseTimer() {\n    if (timer > 0) {\n      timerId = setTimeout(decreaseTimer, 1000);\n      timer--;\n      document.querySelector('#timer').innerHTML = timer;\n    }\n\n    if (timer === 0) {\n      determineWinner({\n        player,\n        enemy,\n        timerId\n      });\n    }\n  }\n\n  decreaseTimer(); //creating a constant loop where we request the window to have a animation \n  //by taking in the argument of itself\n  //updates the canvas with a fillrect after each loop and setting it to black \n  //update draws and moves the object\n\n  function animate() {\n    window.requestAnimationFrame(animate);\n    c.fillStyle = \"black\";\n    c.fillRect(0, 0, canvas.width, canvas.height);\n    background.update();\n    house.update();\n    player.update(); // enemy.update()\n\n    player.velocity.x = 0;\n    enemy.velocity.x = 0; //player movement \n    //if last key is pressed then player will move in that direction by altering velocity\n    //also the players sprite image is set to the correct animation sprite\n\n    if (keys.a.pressed && player.lastKey === 'a') {\n      player.switchSprite('runLeft');\n      player.velocity.x = -7;\n    } else if (keys.d.pressed && player.lastKey === 'd') {\n      player.switchSprite('runRight');\n      player.velocity.x = 7;\n    } else {\n      player.switchSprite('idle');\n    }\n\n    if (player.velocity.y < 0) {\n      player.switchSprite('jump');\n    } //enemy movement same as players\n\n\n    if (keys.ArrowLeft.pressed && enemy.lastKey === 'ArrowLeft') {\n      enemy.velocity.x = -7;\n    } else if (keys.ArrowRight.pressed && enemy.lastKey === 'ArrowRight') {\n      enemy.velocity.x = 7;\n    } //collision detect\n    // if rectanglecollision is true and is attacking is true\n\n\n    if (rectangleCollision({\n      rectangle1: player,\n      rectangle2: enemy\n    }) && player.isAttacking) {\n      player.isAttacking = false;\n      enemy.health -= 10;\n      document.querySelector('#enemy-health').style.width = enemy.health + '%';\n      console.log('player attack successful');\n    }\n\n    if (rectangleCollision({\n      rectangle1: enemy,\n      rectangle2: player\n    }) && enemy.isAttacking) {\n      enemy.isAttacking = false;\n      player.health -= 10;\n      document.querySelector('#player-health').style.width = player.health + '%';\n      console.log('enemy attack successful');\n    } //end game by health\n\n\n    if (player.health <= 0 || enemy.health <= 0) {\n      determineWinner({\n        player,\n        enemy,\n        timerId\n      });\n    }\n  }\n\n  animate();\n  window.addEventListener('keydown', event => {\n    switch (event.key) {\n      case 'd':\n        keys.d.pressed = true;\n        player.lastKey = 'd';\n        break;\n\n      case 'a':\n        keys.a.pressed = true;\n        player.lastKey = 'a';\n        break;\n\n      case 'w':\n        player.velocity.y = -25;\n        break;\n\n      case ',':\n        player.attack();\n        break;\n\n      case 'ArrowRight':\n        keys.ArrowRight.pressed = true;\n        enemy.lastKey = 'ArrowRight';\n        break;\n\n      case 'ArrowLeft':\n        keys.ArrowLeft.pressed = true;\n        enemy.lastKey = 'ArrowLeft';\n        break;\n\n      case 'ArrowUp':\n        enemy.velocity.y = -25;\n        break;\n\n      case 'ArrowDown':\n        enemy.attack();\n        break;\n    } // console.log(event.key)\n\n  });\n  window.addEventListener('keyup', event => {\n    switch (event.key) {\n      case 'd':\n        keys.d.pressed = false;\n        break;\n\n      case 'a':\n        keys.a.pressed = false;\n        break;\n\n      case 'w':\n        keys.w.pressed = false;\n        break;\n    } //enemys\n\n\n    switch (event.key) {\n      case 'ArrowRight':\n        keys.ArrowRight.pressed = false;\n        break;\n\n      case 'ArrowLeft':\n        keys.ArrowLeft.pressed = false;\n        break;\n\n      case 'ArrowUp':\n        keys.ArrowUp.pressed = false;\n        break;\n    } //    console.log(event.key)\n\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aW1lcmZpZ2h0ZXIvLi9zcmMvaW5kZXguc2Nzcz85NzQ1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./src/index.js"](0, {}, __webpack_require__);
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.scss"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;